//path variablevar APath = "E:/nodejs/qoo";//~ var APath = "D:/qoo";var AUrl = "process.env.port || 4000";//~ var AUrl = "http://5.189.151.166";// this is the index of pokervar Express = require("express");//expressvar Request = require("request");var App = Express();// app expressvar http = require('http').Server(App);var io = require('socket.io')(http);//socket iovar fs = require('fs');//cookie modulevar CookieParser = require("cookie-parser");//session modulevar Session = require("express-session");//body parservar BodyParser = require('body-parser');var multer = require('multer');//Random String validatevar randomstring = require("randomstring");//~ var Upload = Multer();//~ var passwordHash = require('password-hash');var passwordHash = require("node-php-password");//nodemailervar nodemailer = require('nodemailer');//apnsvar apn = require('apn');			var Mongoose = require("mongoose");Mongoose.Promise = global.Promise;var uri = 'mongodb://127.0.0.1:27017/db_qoo';Mongoose.connect(uri,{ useMongoClient: true });// ----------------------------- Start All for initalize Database ------------------------------------------------------//// Create ServiceProvider Schemavar ServiceProviderData = new Mongoose.Schema({    firstname: String,    lastname: String,    email: String,    password: String,    mobile: String,    building_name: String,    postal_code: String,    city: String,    country: String,    birth_date: String,    sex: String,    company_name: String,    retail_outlets: String,    any_operation_overseas: String,    status: String,    businesstitle_position: String,    job_responsibilities: String,    office_number: String,    main_office_address1: String,    main_office_address2: String,    device_token: String,    isActived:Boolean,    /*PROVIDER - MEMBERSHIP        1   :   FREE        2  :   SILVER        3  :   GOLD        4  :   PLATINUM        */	member_ship: Number,	member_ship_time: Number,	confirm_status:Number,    /*Recommended        */    no_of_hight_recommended:Number,    no_of_recommended:Number,    no_of_neutral:Number,    no_of_not_recommended:Number    });var SerM = Mongoose.model("service_provider", ServiceProviderData);// Create Customer Schemavar CustomerData = new  Mongoose.Schema({    firstname: String,    lastname: String,    email: String,    password: String,    mobile: String,    building_name: String,    postal_code: String,    city: String,    country: String,    birth_date: String,	sex: String,    home_number: String,    address1: String,    address2: String,    device_token: String,    isActived:Boolean,    occupation: String,    member_ship: Number,	member_ship_time: Number,	confirm_status:Number});// Create Customer Modelvar CusM = Mongoose.model("customer", CustomerData);//create service datavar ServiceData = new Mongoose.Schema({    services_id: String,	name: String,	images : [],	provider_id : String,	sell_price: String,	old_price: String,	flash_sale: Number,	top_service: Number,	for_your_family: Number,	best_for_lady: Number,    category_id: String,    sub_category_id: String,    isAuction:Boolean});var sd = Mongoose.model("services", ServiceData);// service datavar FlashSaleData = new Mongoose.Schema({	name: String,	images : [],	provider_id : String,	sell_price: String,	old_price: String});var fsd = Mongoose.model("flashsales", FlashSaleData);// flash sale datavar TopServicesData = new Mongoose.Schema({	name: String,	images : [],	provider_id : String,	sell_price: String,	old_price: String});var tsd = Mongoose.model("topservices", TopServicesData);// top service datavar ForYourFamilyData = new Mongoose.Schema({	name: String,	images : [],	provider_id : String,	sell_price: String,	old_price: String});var fyfd = Mongoose.model("foryourfamilies", ForYourFamilyData);//for your family datavar BestServiceForLadyData = new Mongoose.Schema({	name: String,	images : [],	provider_id : String,	sell_price: String,	old_price: String});var bsfld = Mongoose.model("bestserviceforladies", BestServiceForLadyData);// best service for lady data//create Customer Commentvar CustomerComment = new Mongoose.Schema({    customer_comment_id: String,	name: String,	title_comment : String,	services_id : String,	comment : String,    /*RATE        0   :   Dissatisfied        1   :   Saticfied        */    rate_services: String,    rate_attitude: String,    rate_price: String,    rate_friendliness: String,    /*RECOMMENDED        1   :   High        2  :   Recommended        3  :   Neutral        4  :   Not Recommended        */    recommenrded_this_provider: String});var CComment = Mongoose.model("customercomment", CustomerComment);// customer comment//Singapore's City or Districtvar SingaporeDistrict = new Mongoose.Schema({    /*COUNCIL DISTRICT        1   :   South West        2  :   North West        3  :   Central Singapore        4  :   North East        5  :   South East        */    council_district:Number,    city_name:String,});var SDSingaporeDistrict = Mongoose.model("singaporedistrict", SingaporeDistrict);//BOOK APPOINTMENTvar BookAppointment = new Mongoose.Schema({    services_name:String,    services_id:String,    time_for_appointment:String,    status_from_provider:String,    from_id:String,    to_id:String,    link_file:String,    user_deleted:String,    time_insert:String,});var BABookAppointment = Mongoose.model("bookappointment", BookAppointment);//AUCTION FUNCTIONvar Auction = new Mongoose.Schema({    customer_id:String,    category_id:String,    sub_category_id:String,    status:String,    time_auction:String,    num_of_order_list:Number,    link_file:String,    user_deleted:String,});var AAuction = Mongoose.model("auction", Auction);//PROVIDER SENT AUCTIONvar ProviderSentAuction = new Mongoose.Schema({    provider_id:String,    auction_id:String,    status:String,    from_price:String,    to_price:String,});var PSAProviderSentAuction = Mongoose.model("providersentauction", ProviderSentAuction);// Create Category Schemavar CCategory = new Mongoose.Schema({    icon: String,    title: String,	is_auction:Number,    subCat: [],    });// Create Category Modelvar categoryM = Mongoose.model("categorymenu", CCategory);// ----------------------------- End All for initalize Database ------------------------------------------------------////function show home pageApp.set('view engine', 'pug');App.set('views', APath +'/views');App.use(CookieParser());//use cookieApp.use(Session({ secret: 'keyboard cat', cookie: { maxAge: 60000 }, resave: true, saveUninitialized: true }))App.use(BodyParser.json());//use body parserApp.use(Express.static( APath + '/asset'));App.use( APath + '/asset/js',Express.static( APath + '/asset'));App.use( APath + '/asset/css',Express.static( APath + '/asset'));App.use( APath + '/asset/image',Express.static( APath + '/asset'));App.use( APath + '/asset/appointment_file',Express.static( APath + '/appointment_file'));App.use( APath + '/asset/auction_file',Express.static( APath + '/auction_file'));// for parsing application/xwww-App.use(BodyParser.urlencoded({ extended: true })); //form-urlencoded// for parsing multipart/form-data//~ App.use(Upload.array()); App.use(Express.static('public'));//function service provider registerApp.post("/ServiceProviderRegister",function(req,res){		SerM.find({'email':req.body.email},function(err,seracc){		CusM.find({'email':req.body.email},function(err,cusacc){			if(seracc.length > 0 || cusacc.length > 0){				res.json({"response": false});			}			else{				console.log(req.body);//~ 				var hashedPassword = passwordHash.generate(req.body.password);                  var hashedPassword = passwordHash.hash(req.body.password);				sptemp = new SerM({                    					firstname: req.body.first_name,					lastname: req.body.last_name,					email: req.body.email,					password: hashedPassword,					mobile: req.body.mobile_number,					building_name: req.body.building_name,					postal_code: req.body.postal_code,					city: req.body.city,					country: req.body.country,					birth_date: req.body.birth_date,					sex: req.body.sex,					company_name: req.body.company_name,					retail_outlets: req.body.retail_outlets,					any_operation_overseas: req.body.any_operation_overseas,					status: req.body.status,                    businesstitle_position: req.body.businesstitle_position,                    job_responsibilities: req.body.job_responsibilities,                    office_number: req.body.office_number,                    main_office_address1: req.body.main_office_address1,                    main_office_address2: req.body.main_office_address2,                    device_token: req.body.device_token,                    //Set true value for test                    isActived:true,					member_ship: 1,					member_ship_time: 0,					confirm_status:0,                       no_of_not_recommended:0,                       no_of_hight_recommended:0,                        no_of_recommended:0,                        no_of_neutral:0,                        no_of_not_recommended:0                        				});				sptemp.save(function (err, sp) {										if (err) {						res.json({"response": false});					}                       else {                           //SEND MAIL HERE						res.json({"response": true});					}				});				}		});	});});//function customer registerApp.post("/CustomerRegister",function(req,res){		SerM.find({'email':req.body.email},function(err,seracc){		CusM.find({'email':req.body.email},function(err,cusacc){			if(seracc.length > 0 || cusacc.length > 0){				res.json({"response": false});			}			else{//~ 				var hashedPassword = passwordHash.generate(req.body.password);                var hashedPassword = passwordHash.hash(req.body.password);				customer = new CusM({                    					firstname: req.body.first_name,					lastname: req.body.last_name,					email: req.body.email,					password: hashedPassword,					mobile: req.body.mobile_number,					building_name: req.body.building_name,					postal_code: req.body.postal_code,                    city: req.body.city,                    country: req.body.country,                    birth_date: req.body.birth_date,                    sex: req.body.sex,                    home_number: req.body.home_number,                    address1: req.body.address1,                    address2: req.body.address2,                    device_token:req.body.device_token,                    occupation: req.body.occupation,                    //Set true value for test                    isActived:true,					member_ship: 0,					member_ship_time: 0,					confirm_status:0                    				});				customer.save(function (err, cus) {					if (err) {						res.json({"response": false});					}else {						res.json({"response": true});					}				});			}		});	});});//function log in service providerApp.post("/AccountLogin",function(req,res){	//check account on service provider	SerM.find({'email':req.body.email},function(err, account){		if(err){			res.json({"response": false});		}else{			if(account.length == 0){				// member account				CusM.find({'email':req.body.email},function(err, cusaccount){					if(err){						res.json({"response": false});					}else{						if(cusaccount.length == 0){							res.json({"response": false});						}						else{ 							var check = passwordHash.verify(req.body.password, cusaccount[0].password);							if(check){                                        CusM.update({'email':req.body.email},{$set:{'device_token':req.body.device_token}},function(err, memacc){                                                if(err){                                                        res.json({"response": false});                                                }else{                                                        res.json({"response": cusaccount[0]});                                                }						                                        });							}							else{								res.json({"response": false});							}						}					}				});							}			else{                //Services provider 				var check = passwordHash.verify(req.body.password, account[0].password);				if(check){                        SerM.update({'email':req.body.email},{$set:{'device_token':req.body.device_token}},function(err, spccount){                                if(err){                                        res.json({"response": false});                                }else{                                        res.json({"response": account[0]});                                }						                        });				}				else{					res.json({"response": false});				}			}		}	});	});App.post("/AccountChangePassword",function(req,res){	var t_email = req.body.p_email;	var t_old_password = req.body.p_old_password;	var t_new_password = req.body.p_new_password;		//check account on service provider	SerM.find({'email':req.body.p_email},function(err, account){		if(err){			res.json({"response": false});		}else{			if(account.length == 0){				//check account on customer				CusM.find({'email':req.body.p_email},function(err, cusaccount){					if(err){						res.json({"response": false});					}else{						if(cusaccount.length == 0){							res.json({"response": false});						}						else{//~ 							var check = passwordHash.verify(req.body.p_old_password, cusaccount[0].password);							if(passwordHash.verify(req.body.p_old_password, cusaccount[0].password)){//~ 								var hashedPassword = passwordHash.generate(req.body.p_new_password);								var hashedPassword = passwordHash.hash(req.body.p_new_password);								CusM.update({'email':req.body.p_email},{$set:{'password':hashedPassword}},function(err, cusaccount){									if(err){										res.json({"response": false});									}else{										res.json({"response": true});									}																	});							}							else{								res.json({"response": false});							}						}					}				});							}			else{//~ 				var check = passwordHash.verify(req.body.p_old_password, account[0].password);				if(passwordHash.verify(req.body.p_old_password, account[0].password)){//~ 					var hashedPassword = passwordHash.generate(req.body.p_new_password);                    var hashedPassword = passwordHash.hash(req.body.p_new_password);					SerM.update({'email':req.body.p_email},{$set:{'password':hashedPassword}},function(err, cusaccount){						if(err){							res.json({"response": false});						}else{							res.json({"response": true});						}											});				}				else{					res.json({"response": false});				}			}		}	});	});//function get info accountApp.post("/GetInfoAccount",function(err,res){	//check account on service provider	SerM.find({'email':req.body.p_email},function(err, account){		if(err){			res.json({"response": false});		}else{			if(account.length == 0){				//check account on customer				CusM.find({'email':req.body.p_email},function(err, cusaccount){					if(err){						res.json({"response": false});					}else{						if(cusaccount.length == 0){							res.json({"response": false});						}						else{							res.json({"response": cusaccount[0]});						}					}				});							}			else{				res.json({"response": account[0]});			}		}	});});//function update accountApp.post("/UpdateProviderMemberShip",function(req,res){	var s_email = req.body.email;	var s_type = req.body.member_ship;	SerM.update({'email':s_email},{$set:{member_ship:s_type}},{upsert: false},function(err,acc){		if(err){			res.json({"response": false});		}		else{			res.json({"response": true});		}	});});App.use(function(req, res, next) {  res.header("Access-Control-Allow-Origin", "*");  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");  next();});//================================= Start TrinhVM// SEND PUSH NOTIFICATIONApp.post("/sendpushtest", function (req, res){        // Set up apn with the APNs Auth Key        var apnProvider = new apn.Provider({              token: {                key: 'apns.p8', // Path to the key p8 file                keyId: 'PDSQJ33AHF', // The Key ID of the p8 file (available at https://developer.apple.com/account/ios/certificate/key)                teamId: '45D84HJ79U', // The Team ID of your Apple Developer Account (available at https://developer.apple.com/account/#/membership/)            },            production: false // Set to true if sending a notification to a production iOS app        });        // Enter the device token from the Xcode console        var deviceToken = req.body.device_token;        // Prepare a new notification        var notification = new apn.Notification();        // Specify your iOS app's Bundle ID (accessible within the project editor)        notification.topic = 'com.QooServices.QooServices';        // Set expiration to 1 hour from now (in case device is offline)        notification.expiry = Math.floor(Date.now() / 1000) + 3600;        // Set app badge indicator        notification.badge = 3;        // Play ping.aiff sound when the notification is received        notification.sound = 'ping.aiff';        // Display the following message (the actual notification text, supports emoji)        notification.alert = req.body.content_text;        // Send any extra payload data with the notification which will be accessible to your app in didReceiveRemoteNotification        notification.payload = {id: 123};        // Actually send the notification        apnProvider.send(notification, deviceToken).then(function(result) {              // Check the result for any failed devices//~             console.log(result);            res.json({"response": result});                    });});App.post("/insert_book_appointment_file", function (req, res) {    var storage = multer.diskStorage({ //multers disk storage settings        destination: function (req, file, cb) {            cb(null, APath + '/asset/appointment_file/');        },        filename: function (req, file, cb) {            cb(null, file.fieldname + '-' + Date.now() + '.txt');        }    });    var upload = multer({ //multer settings        storage: storage    }).single('Appointment');      upload(req, res, function (err) {    if (err) {      // An error occurred when uploading      res.json({            "response":false,            "message":err        });    }    else{            //Add to Appointment//~                 var d = new Date();//~                 var n = d.getMilliseconds();                bookAppointment = new BABookAppointment({                                    services_name:req.body.services_name,                                    services_id:req.body.services_id,                                    time_for_appointment: req.body.time_for_appointment,                                    status_from_provider: req.body.status_from_provider,                                    from_id: req.body.from_id,                                    to_id:req.body.to_id,                                    link_file:"appointment_file/"+ req.file.filename,                                    user_deleted:"",                                    time_insert:Date.now(),                        });                    bookAppointment.save(function (err, bookappointment) {                                                                            if (err) {                                                                                    res.json({"response": false});                                                                            }else {                                                                                    /*                                                                                                                        isPlatform:                                                                                                                        0: iOS                                                                                                                        1:  Android                                                                                                                        2: Web                                                                                                                */                                                                                    var isPlatform = req.body.isPlatform;                                                                                    if (isPlatform == "0"){                                                                                            SerM.find({_id:req.body.to_id},function(err, providers_info){                                                                                                    res.json({"response": true,                                                                                                            "device_token":providers_info[0].device_token,                                                                                                            "value":bookappointment});                                                                                            });                                                                                        }                                                                                    else{                                                                                            res.json({  "response": true,                                                                                                            "value":bookappointment});                                                                                        }                                                                            }                                                                     });    }  });});App.post("/insert_auction_file", function (req, res) {    var storage = multer.diskStorage({ //multers disk storage settings        destination: function (req, file, cb) {            cb(null, APath + '/asset/auction_file/');        },        filename: function (req, file, cb) {            cb(null, file.fieldname + '-' + Date.now() + '.txt');        }    });    var upload = multer({ //multer settings        storage: storage    }).single('AuctionFile');      upload(req, res, function (err) {    if (err) {      // An error occurred when uploading      res.json({            "response":false,            "message":err        });    }    else{            //Add to Auction                new_auction = new AAuction({                                    customer_id:req.body.customer_id,                                    category_id:req.body.category_id,                                    sub_category_id: req.body.sub_category_id,                                    status: req.body.status,                                    time_auction: req.body.time_auction,                                    num_of_order_list:0,                                    user_deleted:"",                                    link_file:"auction_file/"+ req.file.filename,                        });                    new_auction.save(function (err, auctions) {                                                                            if (err) {                                                                                    res.json({"response": false});                                                                            }else {                                                                                    res.json({"response": true,                                                                                                            "value":auctions});                                                                            }                                                                     });    }  });});//delete all AuctionApp.get("/delete__all_auctions",function(req,res){	AAuction.deleteMany({},function(err){		if(err){			res.send(err);		}		else{			res.send("Delete OK");		}	});	});//get_auctions list by account idApp.post("/get_auctions_list",function(req,res){    var account_id = req.body.account_id;    var account_type = req.body.account_type;    var data = [];    if(account_type == 1){            // PROVIDER            //~             for(var i = 0; i < arr_provider_id.length; i++){//~                 findData(arr_provider_id[i], i);//~             }//~             function findData(provider_id, idx){//~                      SerM.find({_id:provider_id},function(err, providers_info){//~                                 if(err){//~                                         res.send("false");//~                                 }//~                                 else{//~                                         if(providers_info.length == 0){//~                                                 res.send("No Provider");//~                                         }//~                                         else{//~                                                 data.push(providers_info[0]);//~                                                 if(idx == arr_provider_id.length - 1){//~                                                         res.send(data);//~                                                 }//~                                                 //~                                         }//~                                 }//~                 });//~             }                        PSAProviderSentAuction.find({ provider_id: account_id },function(err,psalist){                    if(psalist.length > 0){                            for (var i = 0; i < psalist.length; i ++){                                    findAuctionID(psalist[i], i);                            }                            function findAuctionID(pasObject, idx){                                   AAuction.find({ $and: [ { user_deleted: {$ne:  account_id} }, {_id: {$ne: pasObject.auction_id} }, {status:"New Auction"} ] },function(err,aucitonObj){                                                    if(aucitonObj.length > 0){                                                            data.push(aucitonObj);                                                                                                                }                                                if(idx == psalist.length - 1){                                                                         res.json({"response": true,                                                                                    "value":data});                                                             }                                                                                        });                            }                    }                    else{                            AAuction.find({ $and: [ { user_deleted: {$ne:  account_id} }, {status:"New Auction"} ] },function(err,auctionslist){                                         data.push(auctionslist);                                        res.json({"response": true,                                                        "value":data});                            });                    }            });            //~             var category_id = req.body.category_id;//~             var sub_category_id = req.body.sub_category_id;//~             //~             AAuction.find({ $and: [ { user_deleted: {$ne:  account_id} }, {category_id:category_id}, {status:"New Auction"} ] },function(err,auctionslist){//~                 res.json({"response": true,//~                                 "value":auctionslist});//~             });    }    else{            // CUSTOMER            AAuction.find({ $and: [ { user_deleted: {$ne:  account_id} }, {customer_id:account_id} ] },function(err,auctionslist){                 data.push(auctionslist);                res.json({"response": true,                                "value":data});            });    }});//Send a auction.App.post("/send_auction",function(req,res){        //Add New                new_provider_auction = new PSAProviderSentAuction({                                    provider_id:req.body.provider_id,                                    auction_id:req.body.auction_id,                                    status:"Sent Auction",                                    from_price:req.body.from_price,                                    to_price:req.body.to_price,                        });                    new_provider_auction.save(function (err, new_provider_auction) {                                                                            if (err) {                                                                                    res.json({"response": false});                                                                            }else {                                                                                AAuction.find({_id:req.body.auction_id},function(err,aucitonObject){                                                                                            var num_order_list = aucitonObject[0].num_of_order_list;                                                                                            num_order_list ++;                                                                                            AAuction.update({'_id':req.body.auction_id},{$set:{num_of_order_list:num_order_list}},{upsert: false},function(err,acc){                                                                                                    if(err){                                                                                                                res.json({"response": false});                                                                                                    }                                                                                                    else{                                                                                                                res.json({"response": true,                                                                                                                            "value":new_provider_auction});                                                                                                     }                                                                                            });                                                                                  });                                                                            }                                                                     });});//Get Order List.App.get("/get_order_list/:auction_id",function(req,res){        PSAProviderSentAuction.find({auction_id:req.params.auction_id},function(err,order_list){                           if(err){                                        res.json({"response": false});                           }                           else{                                        res.json({"response": true,                                                    "value":order_list});                            }         });});App.get("/delete_all__orderlist",function(req,res){     PSAProviderSentAuction.deleteMany({},function(err){		if(err){			res.send(err);		}		else{			res.send("Delete OK");		}	});});//function  search servicesApp.post("/search_services",function(req,res){    var query = {name:{'$regex':req.body.searchtext}};    sd.find(query,        function(err, servicesname){            if(err){				res.json({"response": "false 1"});                }            else{                if(servicesname.length == 0){                    res.json({"response": []});                }                else{                    res.json({"response": servicesname});                }				            }        });});//Get services by services idApp.get("/servicesinfo/:services_id",function(req,res){	sd.find({'_id':req.params.services_id},function(err,servicesinfo){        res.send(servicesinfo[0]);	});});//Forgot Password APIApp.get("/forgot_password/:email",function(req,res){	var email_address = req.params.email;    //Check In Customer    CusM.find({'email':email_address},function(err, customer_account){            if(customer_account.length == 0){                      SerM.find({'email':email_address},function(err, provider_account){                                if(provider_account.length == 0){                                        res.json({"response": false,                                        "message":"There is no account with the email you provided !"});                                    return;                                }                        });            }	});     // Random code      var random_code = randomstring.generate(6);     var transporter = nodemailer.createTransport({            service: 'gmail',            auth: {                    user: 'mailfortest32018@gmail.com',                    pass: 'TrinhVM@1'            }        });        var mailOptions = {                from: 'mailfortest32018@gmail.com',                to: email_address,                subject: '[QooServices] The Forgot Password mail',                text: 'Please e this code to change your password : ' + random_code,         };             transporter.sendMail(mailOptions, function(error, info){                if (error) {                        res.json({"response": false,                                      "message":"Send mail failed !"});                } else {                        res.json({"response": true,                                        "code":random_code,                                      "message":"Email sent "});                }          });});App.post("/ResetPassword",function(req,res){	var email = req.body.email;	var new_password = req.body.new_password;	//check account on service provider	SerM.find({'email':email},function(err, account){		if(err){			res.json({"response": false});		}else{			if(account.length == 0){				//check account on customer				CusM.find({'email':email},function(err, cusaccount){					if(err){						res.json({"response": false});					}else{						if(cusaccount.length == 0){							res.json({"response": false});						}						else{								var hashedPassword = passwordHash.hash(new_password);								CusM.update({'email':email},{$set:{'password':hashedPassword}},function(err, cusaccount){									if(err){										res.json({"response": false});									}else{										res.json({"response": true});									}																	});						}					}				});							}			else{				var hashedPassword = passwordHash.generate(new_password);					SerM.update({'email':email},{$set:{'password':hashedPassword}},function(err, cusaccount){						if(err){							res.json({"response": false});						}else{							res.json({"response": true});						}											});			}		}	});	});//get services by services providerApp.post("/get_services_by_services_provider",function(req,res){    var query = {provider_id:req.body.provider_id};    sd.find(query,        function(err, servicesname){            if(err){				res.json({"response": "false"});                }            else{                if(servicesname.length == 0){                    res.json({"response": []});                }                else{                    res.json({"response": servicesname});                }				            }        });});//function  post commentApp.post("/post_comment",function(req,res){    CComment.find({customer_comment_id:req.body.customer_comment_id},        function(err,commentss){              if(err){                                }else{                  if(commentss.length == 0){                        customercomment = new CComment({                                    customer_comment_id:req.body.customer_comment_id,                                    name: req.body.name,                                    title_comment: req.body.titlecomment,                                    comment: req.body.comment,                                    services_id:req.body.servicesid,                                    rate_services: req.body.rate_services,                                    rate_attitude: req.body.rate_attitude,                                    rate_price: req.body.rate_price,                                    rate_friendliness: req.body.rate_friendliness,                                    recommenrded_this_provider:req.body.recommenrded_this_provider                        });                                                //Update provider recommended                        if(req.body.recommenrded_this_provider == 1){                                    //High                                    SerM.find({_id:req.body.services_provider_id},function(err,providers_id){                                            if(providers_id.length == 0){                                                    res.json({"response": "false 1"});                                            }                                            else{                                                    var new_no_of_high_recommended = providers_id[0].no_of_hight_recommended;                                                    new_no_of_high_recommended += 1;                                                    SerM.update({'_id':req.body.services_provider_id},{$set:{'no_of_hight_recommended':new_no_of_high_recommended}},function(err, providers_info){                                                            if(err){                                                                    res.json({"response": "false 2"});                                                            }else{                                                                    // UPDATE IS OK - save comment                                                                    customercomment.save(function (err, cus) {                                                                            if (err) {                                                                                    res.json({"response": "false 3"});                                                                            }else {                                                                                    CComment.find({customer_comment_id:req.body.customer_comment_id},function(err,comment){                                                                                            res.json({"response": true,                                                                                            "value":comment});                                                                                    });                                                                            }                                                                     });                                                            }                                                     });                                            }                                    });                        }                        else if(req.body.recommend_services_provider == 2){                                    //Recommended                                    SerM.find({_id:req.body.services_provider_id},function(err,providers_id){                                            if(providers_id.length == 0){                                                    res.json({"response": "false 1"});                                            }                                            else{                                                    var new_no_of_recommended = providers_id[0].no_of_recommended;                                                    new_no_of_recommended += 1;                                                    SerM.update({'_id':req.body.services_provider_id},{$set:{'no_of_recommended':new_no_of_recommended}},function(err, providers_info){                                                            if(err){                                                                    res.json({"response": "false 2"});                                                            }else{                                                                    // UPDATE IS OK - save comment                                                                    customercomment.save(function (err, cus) {                                                                            if (err) {                                                                                    res.json({"response": "false 3"});                                                                            }else {                                                                                    CComment.find({customer_comment_id:req.body.customer_comment_id},function(err,comment){                                                                                            res.json({"response": true,                                                                                            "value":comment});                                                                                    });                                                                            }                                                                     });                                                            }                                                     });                                            }                                     });                        }                        else if(req.body.recommend_services_provider == 3){                                    //Neutral                                    SerM.find({_id:req.body.services_provider_id},function(err,providers_id){                                            if(providers_id.length == 0){                                                    res.json({"response": "false 1"});                                            }                                            else{                                                    var new_no_of_neutral = providers_id[0].no_of_neutral;                                                    new_no_of_neutral += 1;                                                    SerM.update({'_id':req.body.services_provider_id},{$set:{'no_of_neutral':new_no_of_neutral}},function(err, providers_info){                                                            if(err){                                                                    res.json({"response": "false 2"});                                                            }else{                                                                    // UPDATE IS OK - save comment                                                                    customercomment.save(function (err, cus) {                                                                            if (err) {                                                                                    res.json({"response": "false 3"});                                                                            }else {                                                                                    CComment.find({customer_comment_id:req.body.customer_comment_id},function(err,comment){                                                                                            res.json({"response": true,                                                                                            "value":comment});                                                                                    });                                                                            }                                                                     });                                                            }                                                     });                                            }                                     });                        }                        else{                                    //Not Rrcommended                                    SerM.find({_id:req.body.services_provider_id},function(err,providers_id){                                            if(providers_id.length == 0){                                                    res.json({"response": "false 1"});                                            }                                            else{                                                    var new_no_of_not_recommended = providers_id[0].no_of_not_recommended;                                                    new_no_of_not_recommended += 1;                                                    SerM.update({'_id':req.body.services_provider_id},{$set:{'no_of_not_recommended':new_no_of_not_recommended}},function(err, providers_info){                                                            if(err){                                                                    res.json({"response": "false 2"});                                                            }else{                                                                    // UPDATE IS OK - save comment                                                                    customercomment.save(function (err, cus) {                                                                            if (err) {                                                                                    res.json({"response": "false 3"});                                                                            }else {                                                                                    CComment.find({customer_comment_id:req.body.customer_comment_id},function(err,comment){                                                                                            res.json({"response": true,                                                                                            "value":comment});                                                                                    });                                                                            }                                                                     });                                                            }                                                     });                                            }                                     });                        }                  }                  else{                        res.json({"response": "This comment is exist"});                  }              }        });});//Get all comment to testApp.get("/get_comment",function(req,res){	CComment.find({},function(err,comments){		res.send(comments);	});});//Get comment by services idApp.get("/get_comment/:services_id",function(req,res){	CComment.find({services_id:req.params.services_id},function(err,comments){		res.send(comments);	});});//delete all commentApp.get("/delete_all_comment",function(req,res){    CComment.deleteMany({},function(err)    {        if(err){			res.send(err);		}		else{			res.send("Delete OK");		}    });});//Insert Book AppointmentApp.post("/insert_book_appointment",function(req,res){    bookAppointment = new BABookAppointment({                                    services_name:req.body.services_name,                                    services_id:req.body.services_id,                                    time_for_appointment: req.body.time_for_appointment,                                    status_from_provider: req.body.status_from_provider,                                    from_id: req.body.from_id,                                    to_id:req.body.to_id,                                    link_file:"",                                    user_deleted:"",                                    time_insert:Date.now(),                        });                    bookAppointment.save(function (err, bookappointment) {                                                                            if (err) {                                                                                    res.json({"response": false});                                                                            }else {                                                                                    /*                                                                                                                        isPlatform:                                                                                                                        0: iOS                                                                                                                        1:  Android                                                                                                                        2: Web                                                                                                                */                                                                                    var isPlatform = req.body.isPlatform;                                                                                    if (isPlatform == "0"){                                                                                            SerM.find({_id:req.body.to_id},function(err, providers_info){                                                                                                    res.json({  "response": true,                                                                                                            "device_token":providers_info[0].device_token,                                                                                                            "value":bookappointment});                                                                                            });                                                                                        }                                                                                    else{                                                                                            res.json({  "response": true,                                                                                                            "value":bookappointment});                                                                                        }                                                                            }                                                                     });});//get_appointment_by_services_idApp.get("/get_appointment_by_account_id/:account_id",function(req,res){    BABookAppointment.find({ $and: [ { user_deleted: {$ne: req.params.account_id } }, {from_id: req.params.account_id } ] },function(err,appointmentslist){        if(appointmentslist.length == 0){                BABookAppointment.find({ $and: [ { user_deleted: {$ne: req.params.account_id } }, {to_id: req.params.account_id } ] },function(err,appointmentslist2){                    res.send(appointmentslist2);                });         }        else{            res.send(appointmentslist);        }	});//~ 	BABookAppointment.find({from_id:req.params.account_id},function(err,appointmentslist){//~         if(appointmentslist.length == 0){//~                 BABookAppointment.find({to_id:req.params.account_id},function(err,appointmentslist2){//~                     res.send(appointmentslist2);//~                 });//~          }//~         else{//~             res.send(appointmentslist);//~         }//~ 		//~ 	});});//update book appointment status by IDApp.post("/update_status_appointment_id",function(req,res){	var appointment_id = req.body.appointment_id;    var new_status = req.body.new_status;    // FIND APPOINTMENT    BABookAppointment.find({_id:appointment_id},function(err,appointment_object){        if(appointment_object.length == 0){                res.json({"response": false,                              "message":"No Appointment"});         }        else{                if(appointment_object[0].status_from_provider == new_status){                        res.json({"response": false,                                        "message":"Old status and New status is match."});                }                else{                        BABookAppointment.update({'_id':appointment_id},{$set:{'status_from_provider':new_status}},function(err, appointment){                                                if(err){                                                        res.json({"response": false,                                                                      "message":err});                                                }else{                                                        /* if(req.body.isPlatform == 0){                                                                CusM.find({_id:appointment_object[0].from_id},function(err, customers_info){                                                                                                    res.json({"response": true,                                                                                                                  "device_token":customers_info[0].device_token,                                                                                                                  "new_status":new_status});                                                                });                                                        }                                                        else{                                                                res.json({"response": true,                                                                        "new_status":new_status});                                                        } */														BABookAppointment.find({_id:appointment_id},function(err,appointment_obj){															res.json({"response": true,                                                                "new_status":new_status,																	 "value":{"_id":appointment_obj[0]._id,																	 "from_id":appointment_obj[0].to_id,																	 "to_id":appointment_obj[0].from_id,																	 "link_file":appointment_obj[0].link_file,																	 "services_id":appointment_obj[0].services_id,																	 "services_name":appointment_obj[0].services_name,																	 "status_from_provider":appointment_obj[0].status_from_provider,																	 "time_insert":appointment_obj[0].time_insert,																	 "user_deleted":appointment_obj[0].user_deleted}});														});																													                                                                                                        }						                                        });                }        }	});});//update appointment delete statusApp.post("/user_delete_appointment",function(req,res){	var appointment_id = req.body.appointment_id;    var user_deleted = req.body.user_deleted;    // FIND APPOINTMENT    BABookAppointment.find({_id:appointment_id},function(err,appointment_object){        if(appointment_object.length == 0){                res.json({"response": false,                              "message":"No Appointment"});         }        else{                if(appointment_object[0].user_deleted == ""){                        BABookAppointment.update({'_id':appointment_id},{$set:{'user_deleted':user_deleted}},function(err, appointment){                                                if(err){                                                        res.json({"response": false,                                                                      "message":err});                                                }else{                                                        res.json({"response": true,                                                                      "message":"Appointment deleted!"});                                                }						                                        });                }                else{                        if(appointment_object[0].user_deleted == user_deleted){                                    res.json({"response": false,                                                   "message":"The appointment was deleted before!"});                        }                        else{                                BABookAppointment.findByIdAndRemove({_id:appointment_id},function(err){                                        if(err){                                                res.json({"response": false,                                                                "message":err});                                        }                                        else{                                                    res.json({"response": true,                                                                  "message":"Appointment deleted!"});                                            }                                });                        }                }        }	});});//delete book appointment by IDApp.get("/delete_book_appointment_id/:appointment_id",function(req,res){	var appointment_id = req.params.appointment_id;	BABookAppointment.findByIdAndRemove({_id:appointment_id},function(err){		if(err){                res.json({"response": false,                              "message":err});            }            else{                res.json({"response": true});            }	});	});//delete all book appointmentApp.get("/delete__book_appointment",function(req,res){	BABookAppointment.deleteMany({},function(err){		if(err){			res.send(err);		}		else{			res.send("Delete OK");		}	});	});//delete service by id App.get("/delete_service/:service_id",function(req,res){	var service_id = req.params.service_id;	sd.findByIdAndRemove({_id:service_id},function(err){		if(err){			res.send(err);		}		else{			res.send("Delete OK");		}	});	});//delete all servicesApp.get("/delete_services_all",function(req,res){	sd.deleteMany({},function(err){		if(err){			res.send(err);		}		else{			res.send("Delete OK");		}	});	});//Get Customer's Info BY CustomerIDApp.get("/getcustomer_info/:customer_id",function(req,res){    var data = [];   CusM.find({_id:req.params.customer_id},function(err, customers_info){                    if(err){                            res.send("false");                    }                    else{                            if(customers_info.length == 0){                                    res.send("No Customer");                            }                            else{                                    data.push(customers_info[0]);                                    res.send(data);                            }                    }                });});//Get Provider's Info BY ProviderIDApp.get("/getproviders_info/:provider_id",function(req,res){    var data = [];    var all_provider_id = req.params.provider_id;    var arr_provider_id = all_provider_id.split (",")    if(arr_provider_id.length > 0){            for(var i = 0; i < arr_provider_id.length; i++){                findData(arr_provider_id[i], i);            }            function findData(provider_id, idx){                     SerM.find({_id:provider_id},function(err, providers_info){                                if(err){                                        res.send("false");                                }                                else{                                        if(providers_info.length == 0){                                                res.send("No Provider");                                        }                                        else{                                                data.push(providers_info[0]);                                                if(idx == arr_provider_id.length - 1){                                                        res.send(data);                                                }                                                                                        }                                }                });            }    }//~     if(arr_provider_id.length == 1){//~             SerM.find({_id:arr_provider_id[0]},function(err, providers_info){//~                     if(err){//~                             res.send("false");//~                     }//~                     else{//~                             if(providers_info.length == 0){//~                                     res.send("No Provider");//~                             }//~                             else{//~                                     data.push(providers_info[0]);//~                                     res.send(data);//~                             }//~                     }//~                 });//~     }//~     else if(arr_provider_id.length == 2){//~             SerM.find({_id:arr_provider_id[0]},function(err, providers_info){//~                     if(err){//~                             res.send("false");//~                     }//~                     else{//~                             if(providers_info.length == 0){//~                                     res.send("No Provider");//~                             }//~                             else{//~                                     data.push(providers_info[0]);//~                                     //Object 2//~                                     SerM.find({_id:arr_provider_id[1]},function(err, providers_info2){//~                                             if(err){//~                                                     res.send("false");//~                                             }//~                                             else{//~                                                     if(providers_info2.length == 0){//~                                                             res.send("No Provider");//~                                                     }//~                                                     else{//~                                                             data.push(providers_info2[0]);//~                                                             res.send(data);//~                                                     }//~                                             }//~                                         });//~                             }//~                     }//~                 });//~     }//~     else if(arr_provider_id.length == 3){//~             SerM.find({_id:arr_provider_id[0]},function(err, providers_info){//~                     if(err){//~                             res.send("false");//~                     }//~                     else{//~                             if(providers_info.length == 0){//~                                     res.send("No Provider");//~                             }//~                             else{//~                                     data.push(providers_info[0]);//~                                     //Object 2//~                                     SerM.find({_id:arr_provider_id[1]},function(err, providers_info2){//~                                             if(err){//~                                                     res.send("false");//~                                             }//~                                             else{//~                                                     if(providers_info2.length == 0){//~                                                             res.send("No Provider");//~                                                     }//~                                                     else{//~                                                             data.push(providers_info2[0]);//~                                                             //Object 3//~                                                             SerM.find({_id:arr_provider_id[2]},function(err, providers_info3){//~                                                                     if(err){//~                                                                             res.send("false");//~                                                                     }//~                                                                     else{//~                                                                             if(providers_info3.length == 0){//~                                                                                     res.send("No Provider");//~                                                                             }//~                                                                             else{//~                                                                                     data.push(providers_info3[0]);//~                                                                                     res.send(data);//~                                                                                 }//~                                                                     }//~                                                             });//~                                                     }//~                                             }//~                                         });//~                             }//~                     }//~                 });//~     }//~     else{//~         res.send("Data empty");//~     }    });//================================= EndTrinhVM//~ //function show home page//~ App.get("/",function(req,res){//~ 	App.use(Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/js',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/css',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/image',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/appointment_file',Express.static( APath + '/appointment_file'));//~ 	res.render('home');//~ });//~ //function show add service provider form//~ App.get("/add_service_provider_form",function(req,res){//~ 	App.use(Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/js',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/css',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/image',Express.static( APath + '/asset'));//~     App.use( APath + '/asset/appointment_file',Express.static( APath + '/appointment_file'));//~ 	res.render('add_service_provider_form');//~ });//~ //function show sign up//~ App.get("/sign_up.html",function(req,res){//~ 	App.use(Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/js',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/css',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/image',Express.static( APath + '/asset'));//~     App.use( APath + '/asset/appointment_file',Express.static( APath + '/appointment_file'));//~ 	res.render('sign_up');//~ });//~ //function show service type education//~ App.get("/service_type_education.html",function(req,res){//~ 	App.use(Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/js',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/css',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/image',Express.static( APath + '/asset'));//~     App.use( APath + '/asset/appointment_file',Express.static( APath + '/appointment_file'));//~ 	res.render('service_type_education');//~ });//~ //function show service type education//~ App.get("/mycart.html",function(req,res){//~ 	App.use(Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/js',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/css',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/image',Express.static( APath + '/asset'));//~     App.use( APath + '/asset/appointment_file',Express.static( APath + '/appointment_file'));//~ 	res.render('mycart');//~ });//function show all accounts service_providerApp.get("/admin_service_provider",function(req,res){	SerM.find({},function(err,accs){		res.send(accs);	});});//~ //function login//~ App.get("/login.html",function(req,res){//~ 	App.use(Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/js',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/css',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/image',Express.static( APath + '/asset'));//~     App.use( APath + '/asset/appointment_file',Express.static( APath + '/appointment_file'));//~ 	res.render('login');//~ });//~ //function service_details//~ App.get("/service_details",function(req,res){//~ 	App.use(Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/js',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/css',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/image',Express.static( APath + '/asset'));//~     App.use( APath + '/asset/appointment_file',Express.static( APath + '/appointment_file'));//~ 	res.render('service_details');//~ });//~ //function service_comparision//~ App.get("/service_comparision.html",function(req,res){//~ 	App.use(Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/js',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/css',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/image',Express.static( APath + '/asset'));//~     App.use( APath + '/asset/appointment_file',Express.static( APath + '/appointment_file'));//~ 	res.render('service_comparision');//~ });//~ //function checkout//~ App.get("/checkout.html",function(req,res){//~ 	App.use(Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/js',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/css',Express.static( APath + '/asset'));//~ 	App.use( APath + '/asset/image',Express.static( APath + '/asset'));//~     App.use( APath + '/asset/appointment_file',Express.static( APath + '/appointment_file'));//~ 	res.render('checkout');//~ });//function delete accountApp.get("/delete_service_provider/:id_acc",function(req,res){	var id_acc = req.params.id_acc;	SerM.remove({_id:id_acc},function(err){		if(err){			res.send("Delete Fail");		}		else{			res.redirect("/admin_service_provider");		}	});});//function show all accounts customerApp.get("/admin_customer",function(req,res){	CusM.find({},function(err,accs){		res.send(accs);	});});//function delete account customerApp.get("/delete_customer/:id_acc",function(req,res){	var id_acc = req.params.id_acc;	CusM.remove({_id:id_acc},function(err){		if(err){			res.send("Delete Fail");		}		else{			res.redirect("/admin_customer");		}	});	});	/*	name: String,	images : [],	provider_id : String,	provider_name : String,	sell_price: String,	old_price: String,	flash_sale: Number,	top_service: Number,	for_your_family: Number,	best_for_lady: Number	*/	//function api get serviceApp.get("/get_services_main_screen", function(req,res){		var data = [];		sd.find({flash_sale:1},function(err,flash){		//res.send(flash);		data.push(flash);		sd.find({top_service:1},function(err,tops){			data.push(tops);			sd.find({for_your_family:1},function(err,fyf){				data.push(fyf);				sd.find({best_for_lady:1},function(err,bfl){					data.push(bfl);                       res.send(data);				});			});		});	});	});/*COUNCIL DISTRICT        1   :   South West        2  :   North West        3  :   Central Singapore        4  :   North East        5  :   South East        *///delete all commentApp.get("/delete_all_singapore_district",function(req,res){    SDSingaporeDistrict.deleteMany({},function(err)    {        if(err){			res.send(err);		}		else{			res.send("Delete OK");		}    });});App.get("/get_all_singapore_district", function(req,res){		var data = [];		SDSingaporeDistrict.find({council_district:1},function(err,southwest){		data.push(southwest);		SDSingaporeDistrict.find({council_district:2},function(err,northwest){			data.push(northwest);			SDSingaporeDistrict.find({council_district:3},function(err,central){				data.push(central);				SDSingaporeDistrict.find({council_district:4},function(err,northeast){					data.push(northeast);                       SDSingaporeDistrict.find({council_district:5},function(err,southeast){                            data.push(southeast);                            res.send(data);                       });				});			});		});	});	});App.get("/insert_singapore_district", function(req,res){    var data = [        //3 : CENTRAL        {                council_district:3,                city_name:'Alexandra',        },        {                council_district:3,                city_name:'Aljunied',        },        {                council_district:3,                city_name:'Geylang',        },        {                council_district:3,                city_name:'Ayer Rajah',        },        {                council_district:3,                city_name:'Balestier',        },        {                council_district:3,                city_name:'Bartley',        },        {                council_district:3,                city_name:'Bishan',        },        {                council_district:3,                city_name:'Marymount',        },        {                council_district:3,                city_name:'Sin Ming',        },        {                council_district:3,                city_name:'Bukit Timah',        },        {                council_district:3,                city_name:'Sixth Avenue',        },        {                council_district:3,                city_name:'Buona Vista',        },        {                council_district:3,                city_name:'Holland Village',        },        {                council_district:3,                city_name:'one-north',        },        {                council_district:3,                city_name:'Ghim Moh',        },        {                council_district:3,                city_name:'Chinatown',        },        {                council_district:3,                city_name:'Clarke Quay',        },        {                council_district:3,                city_name:'Kreta Ayer',        },        {                council_district:3,                city_name:'Telok Ayer',        },        {                council_district:3,                city_name:'Kallang',        },        {                council_district:3,                city_name:'Bendemeer',        },        {                council_district:3,                city_name:'Geylang Bahru',        },        {                council_district:3,                city_name:'Kallang Bahru',        },        {                council_district:3,                city_name:'Kallang Basin',        },        {                council_district:3,                city_name:'Kolam Ayer',        },        {                council_district:3,                city_name:'Tanjong Rhu',        },        {                council_district:3,                city_name:'Mountbatten',        },        {                council_district:3,                city_name:'Old Airport',        },        {                council_district:3,                city_name:'Lavender',        },        {                council_district:3,                city_name:'Boon Keng',        },        {                council_district:3,                city_name:'Kent Ridge',        },        {                council_district:3,                city_name:'Kim Seng',        },        {                council_district:3,                city_name:'Little India',        },        {                council_district:3,                city_name:'Farrer Park',        },        {                council_district:3,                city_name:'Jalan Besar',        },        {                council_district:3,                city_name:'Chinatown',        },        {                council_district:3,                city_name:'Clarke Quay',        },        {                council_district:3,                city_name:'Kreta Ayer',        },        {                council_district:3,                city_name:'Telok Ayer',        },        {                council_district:3,                city_name:'Kallang',        },        {                council_district:3,                city_name:'Bendemeer',        },        {                council_district:3,                city_name:'Geylang Bahru',        },        {                council_district:3,                city_name:'Kallang Bahru',        },        {                council_district:3,                city_name:'Kallang Basin',        },        {                council_district:3,                city_name:'MacPherson',        },        {                council_district:3,                city_name:'Marina Bay',        },        {                council_district:3,                city_name:'Esplanade',        },        {                council_district:3,                city_name:'Marina Bay Sands',        },        {                council_district:3,                city_name:'Marina Centre',        },        {                council_district:3,                city_name:'Marina East',        },        {                council_district:3,                city_name:'Marina South',        },        {                council_district:3,                city_name:'Mount Faber',        },        {                council_district:3,                city_name:'Mount Vernon',        },        {                council_district:3,                city_name:'Museum',        },        {                council_district:3,                city_name:'Newton',        },        {                council_district:3,                city_name:'Novena',        },        {                council_district:3,                city_name:'Orchard Road',        },        {                council_district:3,                city_name:'Dhoby Ghaut',        },        {                council_district:3,                city_name:'Emerald Hill',        },        {                council_district:3,                city_name:'Peranakan Place',        },        {                council_district:3,                city_name:'Tanglin',        },        {                council_district:3,                city_name:'Outram',        },        {                council_district:3,                city_name:'Pasir Panjang',        },        {                council_district:3,                city_name:'Paya Lebar',        },        {                council_district:3,                city_name:'Eunos',        },        {                council_district:3,                city_name:'Geylang East',        },        {                council_district:3,                city_name:'Potong Pasir',        },        {                council_district:3,                city_name:'Rochor-Kampong Glam',        },        {                council_district:3,                city_name:'Bencoolen',        },        {                council_district:3,                city_name:'Bras Basah',        },        {                council_district:3,                city_name:'Bugis',        },        {                council_district:3,                city_name:'Queenstown',        },        {                council_district:3,                city_name:'Dover',        },        {                council_district:3,                city_name:'Commonwealth',        },        {                council_district:3,                city_name:'Raffles Place',        },        {                council_district:3,                city_name:'River Valley',        },        {                council_district:3,                city_name:'Potong Pasir',        },        {                council_district:3,                city_name:'Rochor-Kampong Glam',        },        {                council_district:3,                city_name:'Bencoolen',        },        {                council_district:3,                city_name:'Bras Basah',        },        {                council_district:3,                city_name:'Bugis',        },        {                council_district:3,                city_name:'Queenstown',        },        {                council_district:3,                city_name:'Dover',        },        {                council_district:3,                city_name:'Commonwealth',        },        {                council_district:3,                city_name:'Raffles Place',        },        {                council_district:3,                city_name:'River Valley',        },        {                council_district:3,                city_name:'Singapore River',        },        {                council_district:3,                city_name:'Southern Islands',        },        {                council_district:3,                city_name:'Tanjong Pagar',        },        {                council_district:3,                city_name:'Shenton Way',        },        {                council_district:3,                city_name:'Telok Blangah',        },        {                council_district:3,                city_name:'Bukit Chandu',        },        {                council_district:3,                city_name:'Bukit Purmei',        },        {                council_district:3,                city_name:'HarbourFront',        },        {                council_district:3,                city_name:'Keppel',        },        {                council_district:3,                city_name:'Radin Mas',        },        {                council_district:3,                city_name:'Mount Faber',        },        {                council_district:3,                city_name:'Tiong Bahru',        },        {                council_district:3,                city_name:'Bukit Ho Swee',        },        {                council_district:3,                city_name:'Bukit Merah',        },        {                council_district:3,                city_name:'Toa Payoh',        },        {                council_district:3,                city_name:'Bukit Brown',        },        {                council_district:3,                city_name:'Caldecott Hill',        },        {                council_district:3,                city_name:'Thomson',        },        {                council_district:3,                city_name:'Whampoa',        },        {                council_district:3,                city_name:'St. Michaels',        },        //5 : SOUTH EAST        {                council_district:5,                city_name:'Bedok',        },        {                council_district:5,                city_name:'Bedok Reservoir',        },        {                council_district:5,                city_name:'Chai Chee',        },        {                council_district:5,                city_name:'Kaki Bukit',        },        {                council_district:5,                city_name:'Tanah Merah',        },        {                council_district:5,                city_name:'Changi',        },        {                council_district:5,                city_name:'Changi Bay',        },        {                council_district:5,                city_name:'Changi East',        },        {                council_district:5,                city_name:'Changi Village',        },        {                council_district:5,                city_name:'East Coast',        },        {                council_district:5,                city_name:'Joo Chiat',        },        {                council_district:5,                city_name:'Katong',        },        {                council_district:5,                city_name:'Kembangan',        },        {                council_district:5,                city_name:'Pasir Ris',        },        {                council_district:5,                city_name:'Elias',        },        {                council_district:5,                city_name:'Lorong Halus',        },        {                council_district:5,                city_name:'Loyang',        },        {                council_district:5,                city_name:'Marine Parade',        },        {                council_district:5,                city_name:'Siglap',        },        {                council_district:5,                city_name:'Tampines',        },        {                council_district:5,                city_name:'Simei',        },        {                council_district:5,                city_name:'Ubi',        },        //2  :   North West        {                council_district:2,                city_name:'Central Catchment Nature Reserve',        },        {                council_district:2,                city_name:'Kranji',        },        {                council_district:2,                city_name:'Lentor',        },        {                council_district:2,                city_name:'Lim Chu Kang',        },        {                council_district:2,                city_name:'Neo Tiew',        },        {                council_district:2,                city_name:'Sungei Gedong',        },        {                council_district:2,                city_name:'Mandai',        },        {                council_district:2,                city_name:'Sembawang',        },        {                council_district:2,                city_name:'Canberra',        },        {                council_district:2,                city_name:'Senoko',        },        {                council_district:2,                city_name:'Simpang',        },        {                council_district:2,                city_name:'Sungei Kadut',        },        {                council_district:2,                city_name:'Woodlands',        },        {                council_district:2,                city_name:'Admiralty',        },        {                council_district:2,                city_name:'Innova',        },        {                council_district:2,                city_name:'Marsiling',        },        {                council_district:2,                city_name:'Woodgrove',        },        {                council_district:2,                city_name:'Yishun',        },        {                council_district:2,                city_name:'Chong Pang',        },        //4 : North East        {                council_district:4,                city_name:'Ang Mo Kio',        },        {                council_district:4,                city_name:'Cheng San',        },        {                council_district:4,                city_name:'Chong Boon',        },        {                council_district:4,                city_name:'Kebun Baru',        },        {                council_district:4,                city_name:'Teck Ghee',        },        {                council_district:4,                city_name:'Yio Chu Kang',        },        {                council_district:4,                city_name:'Bidadari',        },        {                council_district:4,                city_name:'Hougang',        },        {                council_district:4,                city_name:'Defu',        },        {                council_district:4,                city_name:'Kovan',        },        {                council_district:4,                city_name:'Lorong Chuan',        },        {                council_district:4,                city_name:'North-Eastern Islands',        },        {                council_district:4,                city_name:'Punggol',        },        {                council_district:4,                city_name:'Punggol Point',        },        {                council_district:4,                city_name:'Punggol New Town',        },        {                council_district:4,                city_name:'Seletar',        },        {                council_district:4,                city_name:'Sengkang',        },        {                council_district:4,                city_name:'Serangoon',        },        {                council_district:4,                city_name:'Serangoon Gardens',        },        {                council_district:4,                city_name:'Serangoon North',        },        //1 : South West        {                council_district:1,                city_name:'Boon Lay',        },        {                council_district:1,                city_name:'Tukang',        },        {                council_district:1,                city_name:'Liu Fang',        },        {                council_district:1,                city_name:'Samulun',        },        {                council_district:1,                city_name:'Shipyard',        },        {                council_district:1,                city_name:'Bukit Batok',        },        {                council_district:1,                city_name:'Bukit Gombak',        },        {                council_district:1,                city_name:'Hillview',        },        {                council_district:1,                city_name:'Guilin',        },        {                council_district:1,                city_name:'West',        },        {                council_district:1,                city_name:'East',        },        {                council_district:1,                city_name:'Bukit Panjang',        },        {                council_district:1,                city_name:'Choa Chu Kang',        },        {                council_district:1,                city_name:'Yew Tee',        },        {                council_district:1,                city_name:'Clementi',        },        {                council_district:1,                city_name:'Toh Tuck',        },        {                council_district:1,                city_name:'West Coast',        },        {                council_district:1,                city_name:'Jurong East',        },        {                council_district:1,                city_name:'Toh Guan',        },        {                council_district:1,                city_name:'International Business Park',        },        {                council_district:1,                city_name:'Teban Gardens',        },        {                council_district:1,                city_name:'Pandan Gardens',        },        {                council_district:1,                city_name:'Penjuru',        },        {                council_district:1,                city_name:'Yuhua',        },        {                council_district:1,                city_name:'Jurong Regional Centre',        },        {                council_district:1,                city_name:'Lake',        },        {                council_district:1,                city_name:'River',        },        {                council_district:1,                city_name:'Port',        },        {                council_district:1,                city_name:'Jurong West',        },        {                council_district:1,                city_name:'Taman Jurong',        },        {                council_district:1,                city_name:'Boon Lay Place',        },        {                council_district:1,                city_name:'Chin Bee',        },        {                council_district:1,                city_name:'Yunnan',        },        {                council_district:1,                city_name:'Central',        },        {                council_district:1,                city_name:'Kian Teck',        },        {                council_district:1,                city_name:'Safti',        },        {                council_district:1,                city_name:'Wenya',        },        {                council_district:1,                city_name:'Lim Chu Kang',        },        {                council_district:1,                city_name:'Pioneer',        },        {                council_district:1,                city_name:'Joo Koon',        },        {                council_district:1,                city_name:'Gul Circle',        },        {                council_district:1,                city_name:'Pioneer Sector',        },        {                council_district:1,                city_name:'Tengah',        },        {                council_district:1,                city_name:'Tuas',        },        {                council_district:1,                city_name:'Wrexham',        },        {                council_district:1,                city_name:'Promenade',        },        {                council_district:1,                city_name:'Pioneer',        },        {                council_district:1,                city_name:'Soon Lee',        },        {                council_district:1,                city_name:'Tuas South',        },        {                council_district:1,                city_name:'Western Islands Planning Area',        },        {                council_district:1,                city_name:'Western Water Catchment',        },        {                council_district:1,                city_name:'Murai',        },        {                council_district:1,                city_name:'Sarimbun',        }            ];        SDSingaporeDistrict.collection.insert(data);    });//function insert testing dataApp.get("/insert_testing_data", function(req,res){		var data = [								{                       services_id:'1',					name:'Car Repair',					image:['image/services/1.jpg','image/services/2.jpg','image/services/3.jpg','image/services/4.jpg','image/services/5.jpg'],					provider_id : "5aa0ddeceb462c147020ed46",					sell_price: "500",					old_price: "600",                      category_id: "C2311171",                      sub_category_id: "SC12311171",					flash_sale: 1,					top_service: 0,					for_your_family: 0,					best_for_lady: 0,                       isAuction:false				},				{                    services_id:'2',					name:'Motor Cycle Services',					image:['image/services/6.jpg','image/services/7.jpg','image/services/8.jpg','image/services/9.jpg','image/services/10.jpg'],					provider_id : "5aa0ddeceb462c147020ed46",					sell_price: "400",					old_price: "500",                      category_id: "C2311171",                      sub_category_id: "SC12311172",					flash_sale: 1,					top_service: 0,					for_your_family: 0,					best_for_lady: 0,                       isAuction:false				},				{                    services_id:'3',					name:'E-Scooter & E-bicycle Services',					image:['image/services/11.jpg','image/services/12.jpg','image/services/13.jpg','image/services/14.jpg','image/services/15.jpg'],					provider_id : "5aa0ddeceb462c147020ed46",					sell_price: "30",					old_price: "50",                      category_id: "C2311171",                      sub_category_id: "SC12311173",					flash_sale: 1,					top_service: 0,					for_your_family: 0,					best_for_lady: 0,                       isAuction:false				},				{                    services_id:'4',					name:'Toilet Repair',					image:['image/services/16.jpg','image/services/17.jpg','image/services/18.jpg','image/services/19.jpg','image/services/20.jpg'],					provider_id : "5aa0dec8eb462c147020ed47",					sell_price: "99",					old_price: "200",                      category_id: "C2311172",                      sub_category_id: "SC22311172",					flash_sale: 1,					top_service: 0,					for_your_family: 0,					best_for_lady: 0,                       isAuction:false				},				{                    services_id:'5',					name:'Air Condition Repair',					image:['image/services/21.jpg','image/services/22.jpg','image/services/23.jpg','image/services/24.jpg','image/services/25.jpg'],					provider_id : "5aa0dec8eb462c147020ed47",					sell_price: "899",					old_price: "1000",                      category_id: "C2311172",                      sub_category_id: "SC22311171",					flash_sale: 1,					top_service: 0,					for_your_family: 0,					best_for_lady: 0,                       isAuction:false				},								{                    services_id:'6',					name:'Math accountant',					image:['image/services/26.jpg','image/services/27.jpg','image/services/28.jpg','image/services/29.jpg','image/services/30.jpg'],					provider_id : "5aa0dec8eb462c147020ed47",					sell_price: "500",					old_price: "700",                    category_id: "C23111714",                      sub_category_id: "",					flash_sale: 0,					top_service: 1,					for_your_family: 0,					best_for_lady: 0,                       isAuction:false				},								{                    services_id:'7',					name:'Translator',					image:['image/services/31.jpg','image/services/32.jpg','image/services/33.jpg','image/services/34.jpg','image/services/35.jpg'],					provider_id : "5aa0dec8eb462c147020ed47",					sell_price: "200",					old_price: "500",                    category_id: "C23111716",                      sub_category_id: "",					flash_sale: 0,					top_service: 1,					for_your_family: 0,					best_for_lady: 0,                       isAuction:false				},				{                    services_id:'8',					name:'Chinese medicine',					image:['image/services/36.jpg','image/services/37.jpg','image/services/38.jpg','image/services/39.jpg','image/services/40.jpg'],					provider_id : "5aa0dec8eb462c147020ed47",					sell_price: "800",					old_price: "1000",                    category_id: "C2311176",                      sub_category_id: "SC62311174",					flash_sale: 0,					top_service: 1,					for_your_family: 0,					best_for_lady: 0,                       isAuction:false				},				{                    services_id:'9',					name:'Plumbing & Toilet',					image:['image/services/41.jpg','image/services/42.jpg','image/services/43.jpg','image/services/44.jpg','image/services/45.jpg'],					provider_id : "5aa0dec8eb462c147020ed47",					sell_price: "150",					old_price: "200",                    category_id: "C2311172",                      sub_category_id: "SC22311172",					flash_sale: 0,					top_service: 1,					for_your_family: 0,					best_for_lady: 0,                       isAuction:false				},				{                    services_id:'10',					name:'Electrical Services',					image:['image/services/46.jpg','image/services/47.jpg','image/services/48.jpg','image/services/49.jpg','image/services/50.jpg'],					provider_id : "5aa0dec8eb462c147020ed47",					sell_price: "170",					old_price: "300",                    category_id: "C2311172",                      sub_category_id: "SC22311173",					flash_sale: 0,					top_service: 1,					for_your_family: 0,					best_for_lady: 0,                       isAuction:false				},								{                    services_id:'11',					name:'Music Lesson',					image:['image/services/51.jpg','image/services/52.jpg','image/services/53.jpg','image/services/54.jpg','image/services/55.jpg'],					provider_id : "5aa0dec8eb462c147020ed47",					sell_price: "500",					old_price: "700",                    category_id: "C2311177",                      sub_category_id: "SC72311171",					flash_sale: 0,					top_service: 0,					for_your_family: 1,					best_for_lady: 0,                       isAuction:false				},								{                    services_id:'12',					name:'Piano Lession',					image:['image/services/56.jpg','image/services/57.jpg','image/services/58.jpg','image/services/59.jpg','image/services/60.jpg'],					provider_id : "5aa0dec8eb462c147020ed47",					sell_price: "200",					old_price: "500",                    category_id: "C2311177",                      sub_category_id: "SC72311172",					flash_sale: 0,					top_service: 0,					for_your_family: 1,					best_for_lady: 0,                       isAuction:false				},				{                    services_id:'13',					name:'Pre School Education',					image:['image/services/61.jpg','image/services/62.jpg','image/services/63.jpg','image/services/64.jpg','image/services/65.jpg'],					provider_id : "5aa0dec8eb462c147020ed47",					sell_price: "800",					old_price: "1000",                    category_id: "C2311173",                      sub_category_id: "SC32311173",					flash_sale: 0,					top_service: 0,					for_your_family: 1,					best_for_lady: 0,                       isAuction:false				},				{                    services_id:'14',					name:'Child Care Center',					image:['image/services/66.jpg','image/services/67.jpg','image/services/68.jpg','image/services/69.jpg','image/services/70.jpg'],					provider_id : "5aa0dec8eb462c147020ed47",					sell_price: "150",					old_price: "200",                    category_id: "C2311173",                      sub_category_id: "SC32311175",					flash_sale: 0,					top_service: 0,					for_your_family: 1,					best_for_lady: 0,                       isAuction:false				},				{                    services_id:'15',					name:'Bicycle Repairs',					image:['image/services/71.jpg','image/services/72.jpg','image/services/73.jpg','image/services/74.jpg','image/services/75.jpg'],					provider_id : "5aa0ddeceb462c147020ed46",					sell_price: "170",					old_price: "300",                    category_id: "C2311171",                      sub_category_id: "SC12311174",					flash_sale: 0,					top_service: 0,					for_your_family: 1,					best_for_lady: 0,                       isAuction:false				},								{                    services_id:'16',					name:'Massage',					image:['image/services/76.jpg','image/services/77.jpg','image/services/78.jpg','image/services/79.jpg','image/services/80.jpg'],					provider_id : "5aa0ddeceb462c147020ed46",					sell_price: "60",					old_price: "100",                    category_id: "C2311174",                      sub_category_id: "SC42311171",					flash_sale: 0,					top_service: 0,					for_your_family: 0,					best_for_lady: 1,                       isAuction:false				},								{                    services_id:'17',					name:'Pedicure & Manicure',					image:['image/services/81.jpg','image/services/82.jpg','image/services/83.jpg','image/services/84.jpg','image/services/85.jpg'],					provider_id : "5aa0ddeceb462c147020ed46",					sell_price: "200",					old_price: "500",                      category_id: "C2311174",                      sub_category_id: "SC42311172",					flash_sale: 0,					top_service: 0,					for_your_family: 0,					best_for_lady: 1,                       isAuction:false				},				{                    services_id:'18',					name:'Hair dressing',					image:['image/services/86.jpg','image/services/87.jpg','image/services/88.jpg','image/services/89.jpg','image/services/90.jpg'],					provider_id : "5aa0ddeceb462c147020ed46",					sell_price: "800",					old_price: "1000",                      category_id: "C2311174",                      sub_category_id: "SC42311173",					flash_sale: 0,					top_service: 0,					for_your_family: 0,					best_for_lady: 1,                       isAuction:false				},				{                    services_id:'19',					name:'Beauty & Slimming',					image:['image/services/91.jpg','image/services/92.jpg','image/services/93.jpg','image/services/94.jpg','image/services/95.jpg'],					provider_id : "5aa0ddeceb462c147020ed46",					sell_price: "150",					old_price: "200",                      category_id: "C2311174",                      sub_category_id: "SC42311174",					flash_sale: 0,					top_service: 0,					for_your_family: 0,					best_for_lady: 1,                       isAuction:false				},				{                    services_id:'20',					name:'Personal Trainer',					image:['image/services/96.jpg','image/services/97.jpg','image/services/98.jpg','image/services/99.jpg','image/services/100.jpg'],					provider_id : "5aa0ddeceb462c147020ed46",					sell_price: "170",					old_price: "300",                      category_id: "C2311174",                      sub_category_id: "SC42311175",					flash_sale: 0,					top_service: 0,					for_your_family: 0,					best_for_lady: 1,                       isAuction:false				},			];				sd.collection.insert(data);});// khuc nay la cua thang socket dung ai dung vao//khai bao mang luu nguoi dung dang onlineconst Messages = require('./models/messages');const ChatUsers = require('./models/userchat');function isEmpty(str) {  return (!str || 0 === str.length);}let sendNotifyIOS = (device_token, content_text, countMes) => {  let apnProvider = new apn.Provider({    token: {      key: 'apns.p8', // Path to the key p8 file      keyId: 'PDSQJ33AHF', // The Key ID of the p8 file (available at https://developer.apple.com/account/ios/certificate/key)      teamId: '45D84HJ79U', // The Team ID of your Apple Developer Account (available at https://developer.apple.com/account/#/membership/)    },    production: false // Set to true if sending a notification to a production iOS app  });  // Enter the device token from the Xcode console  let deviceToken = device_token;  // Prepare a new notification  let notification = new apn.Notification();  // Specify your iOS app's Bundle ID (accessible within the project editor)  notification.topic = 'com.QooServices.QooServices';  // Set expiration to 1 hour from now (in case device is offline)  notification.expiry = Math.floor(Date.now() / 1000) + 3600;  // Set app badge indicator  notification.badge = countMes;  // Play ping.aiff sound when the notification is received  notification.sound = 'ping.aiff';  // Display the following message (the actual notification text, supports emoji)  notification.alert = content_text;  // Send any extra payload data with the notification which will be accessible to your app in didReceiveRemoteNotification  notification.payload = {    id: 123  };  // Actually send the notification  apnProvider.send(notification, deviceToken).then(function(result) {    // Check the result for any failed devices    ~console.log(result);  });}let CountMes = (toID) => {  return new Promise((resolve, reject) => {    Messages.find({      "toID": toID    }, function(err, message) {      if (err) return reject(new Error('CountMes: ' + 'khong dem duoc'));      resolve(message.length);    });  });}let CountUsers = () => {  return new Promise((resolve, reject) => {    ChatUsers.find({}, function(err, users) {      if (err) return reject(new Error('CountUsers: ' + 'khong dem duoc'));      resolve(users.length);    });  });}let GetMesToID = (toID) => {  return new Promise((resolve, reject) => {    Messages.find({      "toID": toID    }, function(err, messages) {      if (err) return reject(new Error('GetMesToID: khong lay duoc tin nhan theo toID: ' + toID));      resolve(messages);    });  });}let callbackMessageOffline = (messages, socketID) => {  for (let key in messages) {    //gui den nguoi nhan co id    io.to(socketID).emit("server-sent-message-recever", {      messageID: messages[key]._id,      messageContent: messages[key].messageContent,      fromID: messages[key].fromID,      toID: messages[key].toID,      mTime: messages[key].mTime,      Type: messages[key].Type,      mFistName: messages[key].mFistName,      mLastName: messages[key].mLastName,      linkAvatar: messages[key].linkAvatar    });  }}// get all nguoi dung tu mongodblet GetAllUsers = (userID) => {  return new Promise((resolve, reject) => {    ChatUsers.find({      "userID": userID    }, function(err, users) {      if (err) return reject(new Error('GetAllUsers: khong lay duoc nguoi dung' + userID));      resolve(users);    });  });}// get all nguoi dung tu mongodblet GetOneUsers = (userID) => {  return new Promise((resolve, reject) => {    ChatUsers.findOne({      "userID": userID    }, function(err, users) {      if (err)        return reject(new Error('GetOneUsers: khong lay duoc nguoi dung userID ' + userID));      resolve(users);    });  });}// get 1 nguoi dung bang _id mongodblet GetOneUserScoketID = (socketID) => {  return new Promise((resolve, reject) => {    ChatUsers.findOne({      "_id": socketID    }, function(err, user) {      if (err) return reject(new Error('GetOneUserScoketID: ' + socketID));      resolve(user);    });  });}//tao nguoi dung mOnlinelet CreateUser = (socketID, userID) => {  return new Promise((resolve, reject) => {    ChatUsers.create({      _id: socketID,      userID: userID    }, function(err, user) {      if (err) return reject(new Error('CreateUser: socketID: ' + socketID + ' userID: ' + userID));      resolve(user);    });  });}//tao nguoi dung mOnlinelet CreateMessage = (obj) => {  return new Promise((resolve, reject) => {    Messages.create({      _id: obj.messageID,      messageContent: obj.messageContent,      fromID: obj.fromID,      toID: obj.toID,      mTime: obj.mTime,      Type: obj.Type,      mFistName: obj.mFistName,      mLastName: obj.mLastName,      linkAvatar: obj.linkAvatar    }, function(err, message) {      if (err) return reject(new Error('CreateMessage: obj: ' + obj));      resolve(message);    });  });}// xoa nguoi dung culet DelUser = (socketID) => {  return new Promise((resolve, reject) => {    ChatUsers.deleteOne({      _id:socketID    }, function(err, user) {      if (err) return reject(new Error('DelUser: ' + socketID));      resolve(user.result.n);    });  });}// Xoa tin nhan culet DelMessage = (messageID) => {  return new Promise((resolve, reject) => {    Messages.deleteOne({      "_id":messageID    }, function(err, message) {      if (err) return reject(new Error('DelMessage: messageID ' + messageID));      resolve(message.result.n);    });  });}let Connectserver = async (socket, userID) => {  await GetAllUsers(userID).then(allUsers => {    if (allUsers) {      for (let key in allUsers) {        console.log(allUsers[key]._id);        if (allUsers[key]._id !== socket.id) {          //ngat ket noi den nguoi dung cu          io.to(allUsers[key]._id).emit("server-send-request-disconect", {            "userId": allUsers[key].userID          });          //xoa nguoi dung cu trong data mongodb          DelUser(allUsers[key]._id)            .then(res => {              console.log("Connectserver: ");              console.dir(res);            }, err => console.log("Connectserver: " + err));        }      }    }  }, err => console.log("Connectserver: " + err));  await CreateUser(socket.id, userID)    .then(user => {      if (user) {        socket.broadcast.emit("server-send-person-connect", {          "mOnline": userID        });      }    }, err => console.log("Connectserver: " + err));  // gui tin nhan offline cho nguoi online  await GetMesToID(userID)    .then(messagesOffline => {      callbackMessageOffline(messagesOffline, socket.id);    }, err => console.log("Connectserver: " + err));  //view so nguoi dang Online  let numOnline = await CountUsers();  console.log("Connectserver: " + numOnline);}let DisconnectServer = async (socket) => {  await GetOneUserScoketID(socket.id).then(user => {    if (user) {      if (user._id === socket.id) {        //gui den tat ca nguoi dung biet co nguoi offline        socket.broadcast.emit("server-send-person-disconnect", {          "mOnline": user.userID        });        //xoa nguoi dung cu trong data mongodb        DelUser(user._id)          .then(res => {            console.log("DisconnectServer: ");            console.dir(res);          }, err => console.log("DisconnectServer: " + err));      }    }  }, err => console.log(err + ''));  //view so nguoi dang Online  CountUsers()    .then(count => {      console.log("DisconnectServer: " + count);    }, err => console.log("DisconnectServer: " + err));}//tim nguoi dung customerlet GetCusM = (userID) => {  return new Promise((resolve, reject) => {    CusM.findOne({      "_id": userID    }, function(err, customer_account) {      if (err)        return reject(new Error('GetCusM: khong lay duoc nguoi dung userID ' + userID));      resolve(customer_account);    });  });}//tim nguoi dung providerlet GetSerM = (userID) => {  return new Promise((resolve, reject) => {    SerM.findOne({      "_id": userID    }, function(err, provider_account) {      if (err)        return reject(new Error('GetSerM: khong lay duoc nguoi dung userID ' + userID));      resolve(provider_account);    });  });}let GetDeviceToken = (userID) => {  return new Promise((resolve, reject) => {    let token;    GetCusM(userID)      .then(CusM => {//~         token = CusM.device_token;        console.log(CusM);        if (CusM === null) {          GetSerM(userID)            .then(SerM => {//~               token = SerM.device_token;              if (SerM === null) return reject(new Error('GetDeviceToken:khong tim thay token ' + userID));              resolve(SerM.device_token);            }, err => {              console.log(err);            });        }        else{            resolve(CusM.device_token);        }      }, err => {        console.log(err);      });  });}let SentAppointMentIOS = (socket, obj) => {  GetOneUsers(obj.to_id).then(user => {    if (user) {      if (user.userID === obj.to_id) {        io.to(user._id).emit("server-sent-oppointment", obj);      }    } else {      // sent Appointment iOS      GetDeviceToken(obj.to_id)        .then(token => {          let text_content = "You had reveiced a book appointment for services: " + obj.services_name;          sendNotifyIOS(token, text_content, 1);        }, err => console.log("android" + err));      socket.broadcast.emit("server-send-person-disconnect", {        "mOnline": obj.toID      });    }  }, err => console.log(err + ''));}let SentMessageReceiver = (obj, socket) => {  GetOneUsers(obj.toID).then(user => {    if (user) {      if (user.userID === obj.toID) {        //gui den nguoi nhan co id        io.to(user._id).emit("server-sent-message-recever", obj);      }    } else {      GetDeviceToken(obj.toID)        .then(token => {          let text_content = obj.mFistName + " " + obj.mLastName + ": " + (new Buffer(obj.messageContent, 'base64')).toString();          CountMes(obj.toID).then(res => {            sendNotifyIOS(token, text_content, res);          }, err => console.log(err + ''));        }, err => console.log(err));      socket.broadcast.emit("server-send-person-disconnect", {        "mOnline": obj.toID      });    }  }, err => console.log(err + ''));}let SentMessageSender = (obj) => {  GetOneUsers(obj.fromID).then(user => {    if (user) {      if (user.userID === obj.fromID) {        io.to(user._id).emit("server-sent-message-sender", obj);        //luu tinh nhan        CreateMessage(obj)          .then(res => {            console.log("SentMessageSender" + res)          }, err => console.log("SentMessageSender" + err));      }    }  }, err => console.log(err + ''));}let SentMessageSeen = (obj) => {  DelMessage(obj.messageID)    .then(res => console.log(res), err => console.log(err));  GetOneUsers(obj.toID).then(user => {    if (user) {      if (user.userID === obj.toID) {        io.to(user._id).emit("server-send-message-seen", obj);      }    }  }, err => console.log(err + ''));}let SentMessageReceived = (obj) => {  DelMessage(obj.messageID)    .then(res => console.log(res), err => console.log(err));  GetOneUsers(obj.toID).then(user => {    if (user) {      if (user.userID === obj.toID) {        io.to(user._id).emit("server-send-message-received", obj);      }    }  }, err => console.log(err + ''));}let NotificationTyping = (obj) => {  GetOneUsers(obj.toID).then(user => {    if (user) {      if (user.userID === obj.toID) {        // io.to(user._id).emit("server-send-person-connect", {          // "mOnline": socket.fromID        // });		        io.to(user._id).emit("server-send-typing", obj);      }    }  }, err => console.log(err + ''));}let NotificationTyped = (obj) => {  GetOneUsers(obj.toID).then(user => {    if (user) {      if (user.userID === obj.toID) {        io.to(user._id).emit("server-send-typed", obj);      }    }  }, err => console.log(err + ''));}let GetUserOnline = (arrUsers, socket) => {    let arrOnline = [];    for (var onlineKey in arrUsers) {      GetOneUsers(arrUsers[onlineKey])      .then(user => {		  console.log(user);		  if(user){			   arrOnline.push(arrUsers[onlineKey]);		  }      },err =>console.log(''));    }    setTimeout(function(){      socket.emit("client-send-respon-online", {        "arrUsers": arrOnline      });    }    ,2000);}// khi co nguoi dung ket noi den serverio.on("connection", function(socket) {  console.log("Co nguoi ket noi " + socket.id);  // DANG KY NGUOI DUNG  socket.on("client-connect-server", function(userID) {    Connectserver(socket, userID);  });  socket.on("disconnect", function() {    //khi nguoi dung ngat ket noi server    DisconnectServer(socket);  });  //nhan tin nhan tu nguoi dung gui len va gui cho nguoi nhan  socket.on("client-send-message-recever", function(data) {    let obj = JSON.parse(data);    //send cho nguoi nhan    SentMessageReceiver(obj, socket);    //send cho nguoi gui    SentMessageSender(obj);  });  socket.on("client-send-oppointment", function(data) {    let obj = JSON.parse(data);    SentAppointMentIOS(socket, obj);  });  socket.on("client-send-message-seen", function(data) {    let obj = JSON.parse(data);    //gui da xem tin nhan    SentMessageSeen(obj);  });  socket.on("client-send-message-received", function(data) {    let obj = JSON.parse(data);    //gui da nhan tin nhan    SentMessageReceived(obj);  });  //kiem tra dang dang nhap du lieu  socket.on("client-send-typing", function(data) {    let obj = JSON.parse(data);    //bao nguoi dung dang nhap du lieu    NotificationTyping(obj);  });  //kime tra da ngung nhap du lieu  socket.on("client-send-typed", function(data) {    let obj = JSON.parse(data);    //bao nguoi dung dang nhap du lieu    NotificationTyped(obj);  });  socket.on("client-send-request-online", function(data) {    // console.dir(data);    var obj = JSON.parse(data);    var userID = obj.userId;    var arrUsers = obj.arrUsers;    // console.dir(userID);    // console.dir(arrUsers);    //{"userId":"dasjkdhsjdsj","arrUsers";["adasdsadasds","sdsdsdsada"]}    GetUserOnline(arrUsers,socket);  });});// get category App.get("/get_all_category", function(req,res){	// đường dẫn tới hình ảnh web admin	let path="/Qooservice/system/public/uploadfile/category/";	let pathsub="/Qooservice/system/public/uploadfile/category/sub/";	categoryM.find({},function(err,cates){		res.json({"value":cates,				  "pathicon":path,				  "pathsub":pathsub,					});	});	});//listen for requestshttp.listen(process.env.port || 4000, function() {	});//~ http.listen(80, function(){});//~ http.listen(4000, function(){});